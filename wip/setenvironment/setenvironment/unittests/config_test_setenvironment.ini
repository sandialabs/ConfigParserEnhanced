[CONFIG_A]
envvar-set     FOO : bar
envvar-append  FOO : baz
envvar-prepend FOO : foo
envvar-set     BAR : foo
envvar-set     BAZ : bar
envvar-remove-substr FOO : bar
envvar-unset   FOO
envvar-remove  BAZ

[CONFIG_A+]
use CONFIG_A
use CONFIG_B+


[CONFIG_B]
module-purge
module-use             : setenvironment/unittests/modulefiles
module-load   gcc A    : 4.8.4
module-load   boost    : 1.10.1
module-load   python A : 3.5.3
module-load   gcc B    : 4.8.4
module-unload boost    :
module-unload python   :
module-load   python B : 3.9.0
module-swap   gcc      : gcc/7.3.0
module-remove python   :


[CONFIG_B+]
use CONFIG_B
use CONFIG_A+



[CONFIG_TEST_ENVVAR_REMOVE]
module-use         : /foo/bar/baz
envvar-set     FOO : bar
envvar-append  FOO : baz
envvar-prepend FOO : foo
envvar-set     BAR : foo
envvar-remove  FOO
envvar-remove  UNKNOWN


[ENVVAR_SET_FOO]
envvar-set FOO : BAR


[MODULE_USE_BADPATH]
module-use : this/is/a/bad/path



[MODULE_LOAD_NOEXIST]
module-load gcc : 1.2.3



[MODULE_LOAD_OK]
module-use      : setenvironment/unittests/modulefiles
module-load gcc : 7.3.0



[ENVVAR_VAR_EXPANSION]
envvar-set ENVVAR_PARAM_01 : "AAA"
envvar-set ENVVAR_PARAM_02 : "B${ENVVAR_PARAM_01}B"
envvar-set ENVVAR_PARAM_03 : ${ENVVAR_PARAM_01} -- ${ENVVAR_PARAM_02} -- ${ADFASF}



[ENVVAR_VAR_EXPANSION_BAD]
envvar-set ENVVAR_PARAM_01 : "B${ENVVAR_PARAM_MISSING}B"



[CONFIG_ENVVAR_WITH_GENERIC_OPTION]
envvar-set     FOO : bar
envvar-append  FOO : baz
envvar-prepend FOO : foo
key1: value1


[ENVVAR_UNSET_TEST]
envvar-set     FOO : bar
envvar-unset   FOO
# FOO should be UNSET so unsetting again
# should exercise the condition if we try
# to unset a nonexistent envvar.
envvar-unset   FOO B


[ENVVAR_REMOVE_SUBSTR_TEST]
# Create an environment var FOO="BAAAB"
envvar-set FOO           : BAAAB
# Removes all "A" substrings from FOO
envvar-remove-substr FOO : A
# Result should be: FOO="BB"


[ENVVAR_REMOVE_SUBSTR_TEST_PATHS]
# USECASE 1:
envvar-set TEST_SETENVIRONMENT_PATH1 : /foo:/bar/baz:/bif
envvar-remove-substr TEST_SETENVIRONMENT_PATH1: /bar/baz
# Result of `/foo::/bif` is ok, but we should properly handle the `/` in the
# generated bash script when writing output to a file (will sed not work?)

# USECASE 2:
envvar-set TEST_SETENVIRONMENT_PATH2 : /foo:/bar:/bar/baz:/bif
envvar-remove-substr TEST_SETENVIRONMENT_PATH2: /bar
# Desired result is `/foo:/bar/baz:/bif`
# Result will probably be `/foo::/baz:/bif` which is wrong.


[ENVVAR_REMOVE_SUBSTR_TEST_NO_ENVVAR]
# Test removing from an envvar that doesn't exist.
envvar-unset FOO
envvar-remove-substr FOO: MEH!
# This should do nothing...


[ENVVAR_REMOVE_PATH_ENTRY_TEST]
# Test 1:
# Create an TEST_PATH1 = "/foo:/bar:/bar/baz:/bar:/bif"
envvar_set TEST_PATH1 : /foo:/bar:/bar/baz:/bar:/bif
# Removes "/bar" from the path
envvar-remove-path-entry TEST_PATH1 : /bar
# Result should be: TEST_PATH1 = "/foo:/bar/baz:/bif"

# Test 2:
# Try removing a nonexistent path substr
envvar-set TEST_PATH2 : /foo:/bar:/bar/baz:/bar:/bif
envvar-remove-path-entry TEST_PATH2 : /this/path/does/not/exist
# Result should be: /foo:/bar:/bar/baz:/bar:/bif

# Test 3:
# Remove a path that is longer than 1 dir
envvar-set TEST_PATH3 : /foo:/bar:/bar/baz:/bar:/bif
envvar-remove-path-entry TEST_PATH3 : /bar/baz
# Result should be: /foo:/bar:/bar:/bif

# Test 4:
# Try removing an entry from a non-existent path:
envvar-remove-path-entry TEST_PATH_NO_EXIST: /biz
# This shouldn't do anything...


[ENVVAR_FIND_IN_PATH_TEST]
envvar-set          TEST_ENVVAR_EXE  : ls
envvar-find-in-path TEST_ENVVAR_PATH : ${TEST_ENVVAR_EXE}


[ENVVAR_FIND_IN_PATH_NOT_FOUND_TEST]
envvar-find-in-path TEST_ENVVAR_NOTFOUND : nonexistent-app


# Issue #12 : `envvar-assert-not-empty` testing
[ENVVAR_ASSERT_NOT_EMPTY]
envvar-set TEST_ENVVAR_VALUE_01: FOO
envvar-assert-not-empty TEST_ENVVAR_VALUE_01
# TEST_ENVVAR_VALUE_01 should be set and would pass the check

envvar-set TEST_ENVVAR_VALUE_02:
envvar-assert-not-empty TEST_ENVVAR_VALUE_02
# TEST_ENVVAR_VALUE_02 would be empty and thus would fail the check

envvar-set TEST_ENVVAR_VALUE_03:
envvar-assert-not-empty TEST_ENVVAR_VALUE_03: ERROR - TEST_ENVVAR_VALUE_03 is missing or empty.
# TEST_ENVVAR_VALUE_03 would be empty and thus would fail the check

envvar-unset TEST_ENVVAR_VALUE_04
envvar-assert-not-empty TEST_ENVVAR_VALUE_04
# TEST_ENVVAR_VALUE_02 would be unset and would fail the check

envvar-unset TEST_ENVVAR_VALUE_05
envvar-assert-not-empty TEST_ENVVAR_VALUE_05: ERROR - TEST_ENVVAR_VALUE_05 is missing or empty.
# TEST_ENVVAR_VALUE_02 would be unset and would fail the check

[ENVVAR_ASSERT_NOT_EMPTY_02]
envvar-unset TEST_ENVVAR
envvar-assert-not-empty TEST_ENVVAR : "MY CUSTOM ERROR MESSAGE"


[ENVVAR_SET_IF_EMPTY_01]
# Cleanup
envvar-unset FOO_VAR
envvar-unset BAR_VAR
envvar-unset BAZ_VAR
envvar-unset BIF_VAR

# Set initial envvars
envvar-set FOO_VAR: FOO_VAL
envvar-set BAR_VAR:

# Test envvar-set-if-empty
envvar-set-if-empty FOO_VAR: BAR_VAL
envvar-set-if-empty BAR_VAR: BAR_VAL
envvar-set-if-empty BAZ_VAR: BAZ_VAL
envvar-set-if-empty BIF_VAR:

# Results should be:
# FOO_VAR == FOO_VAL
# BAR_VAR == BAR_VAL
# BAZ_VAR == BAZ_VAL
# BIF_VAR == ""

# Test module-load without version
[MODULE_LOAD_NO_VERSION]
module-unload gcc
module-unload boost
module-load gcc
module-load boost:
envvar-assert-not-empty TEST_SETENVIRONMENT_GCC_VER
